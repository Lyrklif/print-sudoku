{"version":3,"sources":["constants/levels.js","components/select-level/select-level.js","store/actions/params/level.js","constants/actionTypes.js","components/sudoku-count/sudoku-count.js","store/actions/params/sudokuCount.js","components/sheet-count/sheet-count.js","store/actions/params/pages.js","store/actions/fluids/fluids.js","functions/getSudokuArray.js","functions/getRandomNumber.js","functions/getUniqueNumbersArray.js","functions/getClearedArrayByIndexes.js","components/loader/loader.js","components/buttons/buttons.js","components/panel/panel.js","components/sudoku/sudoku.js","components/preview/preview.js","components/area/area.js","App.js","serviceWorker.js","store/reducers/params/index.js","store/reducers/params/level.js","store/reducers/params/sudokuCount.js","store/reducers/params/pages.js","store/reducers/params/sudokuCountOptions.js","store/reducers/index.js","store/reducers/fluids/index.js","store/mainStore.js","store/startingValue.js","index.js"],"names":["name","title","hiddenNumbers","SelectLevel","store","useSelector","state","dispatch","useDispatch","className","value","params","level","onChange","e","type","target","levels","map","elem","i","key","SudokuCount","sudokuCountOptions","sudokuCount","onClick","SheetCount","handleChange","pages","for","if","min","max","onInput","array","getSudokuArray","puzzle","makepuzzle","solution","solvepuzzle","fixedPuzzle","forEach","number","getRandomNumber","Math","floor","random","getUniqueNumbersArray","length","randomNumber","indexOf","push","getClearedArrayByIndexes","baseArray","indexes","clearedArray","Loader","class","Buttons","useState","progress","changeProgress","created","changeCreated","createSudokuArray","blocks","sheet","z","completeArray","disabled","setTimeout","fluids","window","print","Panel","Sudoku","props","index","Preview","block","el","Area","Array","item","App","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","combineReducers","action","createStore","reducer","ReactDOM","render","mainStore","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ef3cfa30.chunk.js","sourcesContent":["\r\n// уровни сложности судоку\r\n\r\nexport default [\r\n  {\r\n    name: 'easy',\r\n    title: 'Легко',\r\n    hiddenNumbers: 40,\r\n  },\r\n  {\r\n    name: 'normally',\r\n    title: 'Нормально',\r\n    hiddenNumbers: 48,\r\n  },\r\n  {\r\n    name: 'difficult',\r\n    title: 'Сложно',\r\n    hiddenNumbers: 53,\r\n  },\r\n  {\r\n    name: 'veryDifficult',\r\n    title: 'Очень сложно',\r\n    hiddenNumbers: 58,\r\n  },\r\n  {\r\n    name: 'hardcore',\r\n    title: 'Хардкор',\r\n    hiddenNumbers: 65,\r\n  },\r\n];","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport level from '../../store/actions/params/level';\r\nimport levels from '../../constants/levels';\r\n\r\n\r\n// задать уровень сложности судоку\r\nconst SelectLevel = () => {\r\n  const store = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // при изменении select option (уровни сложности)\r\n  const handleChange = (e) => {\r\n    dispatch(level(+e.target.value))\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <span className=\"fluid-name\">Уровень сложности</span>\r\n\r\n      <div className=\"select\">\r\n        <select className=\"select__content\" value={store.params.level} onChange={handleChange}>\r\n\r\n          {levels.map((elem, i) => {\r\n            return (\r\n              <option key={i} value={i}>{elem.title}</option>\r\n            );\r\n          })}\r\n\r\n        </select>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default SelectLevel;\r\n\r\n","import { LEVEL } from \"../../../constants/actionTypes\";\r\n\r\nexport default (value) => {\r\n  return {\r\n    type: LEVEL,\r\n    value\r\n  };\r\n}\r\n\r\n","\r\n// типы, используемые при записи в store\r\n\r\nexport const FLUIDS = 'FLUIDS';\r\n\r\n\r\nexport const NUMBER_OF_SHEET = 'NUMBER_OF_SHEET';\r\nexport const LEVEL = 'LEVEL';\r\nexport const BLOCKS_ON_SHEET = 'BLOCKS_ON_SHEET';\r\nexport const COUNT_BLOCKS_ON_SHEET = 'COUNT_BLOCKS_ON_SHEET';\r\n\r\n\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport sudokuCount from '../../store/actions/params/sudokuCount';\r\n\r\n\r\n// задать к-во судоку на странице\r\nconst SudokuCount = () => {\r\n  const store = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // при нажатии на кнопки с цифрами -> к-во судоку на странице\r\n  const handleClick = (value) => {\r\n    dispatch(sudokuCount(value))\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <span className=\"fluid-name\">К-во судоку на&nbsp;странице</span>\r\n      <ul className=\"sudoku-count__list\">\r\n\r\n        {store.params.sudokuCountOptions.map((elem, i) => {\r\n          return (\r\n            <li className=\"sudoku-count__item\" key={i}>\r\n              <button\r\n                className={\"sudoku-count__btn \" + (elem === store.params.sudokuCount ? 'active' : '')}\r\n                onClick={() => handleClick(elem)}\r\n              >{elem}</button>\r\n            </li>\r\n          );\r\n        })}\r\n\r\n      </ul>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default SudokuCount;\r\n\r\n","import { BLOCKS_ON_SHEET } from \"../../../constants/actionTypes\";\r\n\r\nexport default (value) => {\r\n  return {\r\n    type: BLOCKS_ON_SHEET,\r\n    value\r\n  };\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport pages from '../../store/actions/params/pages';\r\n\r\n\r\n// задать к-во страниц\r\nconst SheetCount = () => {\r\n  const store = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // обработчик изменения input value (к-во стр.)\r\n  const handleChange = (value) => {\r\n    dispatch(pages(value))\r\n  };\r\n\r\n\r\n  // уменьшить значение на 1\r\n  const minus = () => {\r\n    let value = store.params.pages - 1;\r\n    value = value >= 1 ? value : 1;\r\n\r\n    handleChange(value);\r\n  };\r\n\r\n\r\n  // увеличить значение на 1\r\n  const plus = () => {\r\n    let value = store.params.pages + 1;\r\n    value = value <= 100 ? value : 100;\r\n\r\n    handleChange(value);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <label className=\"sheet-count\" for=\"sheet\">\r\n        <span className=\"fluid-name\">К-во страниц</span>\r\n      </label>\r\n\r\n      <div className=\"sheet-count__controls-group\">\r\n\r\n        <button\r\n          onClick={minus}\r\n          className=\"btn btn-secondary sheet-count__btn_minus\">-</button>\r\n\r\n        <input\r\n          className=\"sheet-count__input\"\r\n          if=\"sheet\"\r\n          value={store.params.pages}\r\n          type=\"number\"\r\n          min=\"1\"\r\n          max=\"100\"\r\n          onInput={(e) => handleChange(e.target.value)}\r\n        />\r\n\r\n        <button\r\n          onClick={plus}\r\n          className=\"btn btn-secondary sheet-count__btn_plus\">+</button>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default SheetCount;\r\n\r\n","import { NUMBER_OF_SHEET } from \"../../../constants/actionTypes\";\r\n\r\nexport default (value) => {\r\n  return {\r\n    type: NUMBER_OF_SHEET,\r\n    value\r\n  };\r\n}\r\n\r\n","\r\nimport { FLUIDS } from \"../../../constants/actionTypes\";\r\n\r\nexport default (array) => {\r\n  return {\r\n    type: FLUIDS,\r\n    array\r\n  };\r\n}\r\n","import { makepuzzle, solvepuzzle } from \"sudoku\";\r\n\r\n\r\n/**\r\n * возвращает сгенерированный массив чисел для судоку\r\n * \r\n * @returns {object []}\r\n */\r\nconst getSudokuArray = () => {\r\n  let puzzle = makepuzzle(); // судоку с отсутствием части цифр\r\n  let solution = solvepuzzle(puzzle); // решение\r\n\r\n  // исправленный массив. все числа увеличены на 1, \r\n  // т.к. в оригинальном массиве идут числа от 0 до 8\r\n  let fixedPuzzle = []; \r\n\r\n  // увеличить все числа на 1\r\n  solution.forEach((number, i) => {\r\n    fixedPuzzle[i] = ++number;\r\n  });\r\n\r\n  return fixedPuzzle;\r\n};\r\n\r\nexport default getSudokuArray;\r\n","\r\n\r\n/**\r\n * возвращает рандомное число в заданном промежутке\r\n *\r\n * @param {number} min [минимальное число]\r\n * @param {number} max [максимальное число]\r\n * @returns {number}\r\n */\r\nconst getRandomNumber = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\nexport default getRandomNumber;","\r\nimport getRandomNumber from './getRandomNumber';\r\n\r\n\r\n/**\r\n * возвращает сгенерированный массив из уникальных чисел (т.е. числа в нём не повторяются)\r\n *\r\n * @param {number} [length=0] [длина массива]\r\n * @param {number} [min=0] [минимальное значение числа]\r\n * @param {number} [max=100] [максимальное значение числа]\r\n * @returns {object []}\r\n */\r\nconst getUniqueNumbersArray = (length = 0, min = 0, max = 100) => {\r\n  // array = Array.from({length: count}, () => Math.floor(Math.random() * count));\r\n  let array = [];\r\n\r\n  while (array.length < length - 1) {\r\n    let randomNumber = getRandomNumber(min, max);\r\n\r\n    if (!array.indexOf(randomNumber) > -1) {\r\n      array.push(randomNumber);\r\n    }\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nexport default getUniqueNumbersArray;","\r\n/**\r\n * возвращает массив, в котором элементы по заданным индексам заменены на пустую строку\r\n *\r\n * @param {object []} baseArray [изначальный массив]\r\n * @param {object []} indexes [массив индексов]\r\n * @returns {object []}\r\n */\r\nconst getClearedArrayByIndexes = (baseArray, indexes) => {\r\n  let clearedArray = baseArray;\r\n\r\n  indexes.forEach(i => {\r\n    clearedArray[i] = '';\r\n  });\r\n\r\n  return clearedArray;\r\n}\r\n\r\nexport default getClearedArrayByIndexes;","// loader\r\n\r\n\r\nimport React from 'react';\r\n\r\n\r\n// кнопки\r\nconst Loader = () => {\r\n  return (\r\n    <>\r\n      <span class=\"loader\"></span>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Loader;\r\n\r\n","\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport levels from '../../constants/levels';\r\n\r\nimport fluids from '../../store/actions/fluids/fluids';\r\n\r\nimport getSudokuArray from '../../functions/getSudokuArray';\r\nimport getUniqueNumbersArray from '../../functions/getUniqueNumbersArray';\r\nimport getClearedArrayByIndexes from '../../functions/getClearedArrayByIndexes';\r\n\r\nimport Loader from '../loader/loader';\r\n\r\n\r\n\r\n// кнопки\r\nconst Buttons = () => {\r\n  const store = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  const length = levels[store.params.level].hiddenNumbers;\r\n  const [progress, changeProgress] = useState(false); // прогресс создания судоку\r\n  const [created, changeCreated] = useState(false); // судоку созданы \r\n\r\n\r\n  // записать массив судоку в store\r\n  const setSudokuArray = () => {\r\n    changeProgress(true);\r\n\r\n    setTimeout(() => {\r\n      dispatch(fluids(createSudokuArray())); // записать новый массив судоку в store\r\n\r\n      changeProgress(false);\r\n      changeCreated(true);\r\n\r\n    }, 500);\r\n  };\r\n\r\n\r\n  // создать массив судоку\r\n  const createSudokuArray = () => {\r\n    let array = [];\r\n    let blocks = store.params.sudokuCount;\r\n    let sheet = store.params.pages;\r\n\r\n    for (let i = 0; i < sheet; ++i) {\r\n      array[i] = [];\r\n      for (let z = 0; z < blocks; ++z) {\r\n\r\n        // удалить из массива судоку несколько чисел, к-во зависит от уровня сложности \r\n        let completeArray = getClearedArrayByIndexes(getSudokuArray(), getUniqueNumbersArray(length, 0, 80));\r\n        array[i][z] = completeArray;\r\n      }\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n\r\n  // диалоговое окно для печати\r\n  const print = () => {\r\n    window.print();\r\n\r\n    changeCreated(false);\r\n    changeProgress(false);\r\n\r\n    dispatch(fluids([]));// очистить массив судоку в store\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        disabled={progress}\r\n        title={progress ? 'Судоку создаётся' : 'Создать судоку'}\r\n        className={\"btn btn-primary panel__btn \" + (progress && 'loading')}\r\n        onClick={setSudokuArray}>\r\n        {progress ? <Loader /> : <span>Создать судоку</span>}\r\n      </button>\r\n\r\n      <button\r\n        disabled={!created}\r\n        title={created ? 'Распечатать' : 'Сначала нужно создать судоку'}\r\n        className=\"btn btn-secondary panel__btn\"\r\n        onClick={print}>Распечатать</button>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Buttons;\r\n\r\n","import React from 'react';\r\n\r\nimport SelectLevel from '../select-level/select-level';\r\nimport SudokuCount from '../sudoku-count/sudoku-count';\r\nimport SheetCount from '../sheet-count/sheet-count';\r\n\r\nimport Buttons from '../buttons/buttons';\r\n\r\n\r\n// панель настроек параметров судоку\r\nconst Panel = () => {\r\n\r\n  return (\r\n    <section className=\"panel no-print\">\r\n      <h1>Судоку</h1>\r\n\r\n      <SelectLevel />\r\n      <SudokuCount />\r\n      <SheetCount />\r\n\r\n      <Buttons />\r\n\r\n    </section>\r\n  )\r\n};\r\n\r\nexport default Panel;\r\n\r\n","import React from 'react';\r\n\r\n\r\n// судоку (отображение массива в виде квадрата 9х9) \r\nconst Sudoku = (props) => {\r\n\r\n  // массив чисел, записанных в <div>\r\n  const array = props.array.map((number, index) => {\r\n    return (\r\n      <div key={index} className=\"sudoku__col\">\r\n        <span className=\"sudoku__number\">{number}</span>\r\n      </div>\r\n    )\r\n  });\r\n\r\n\r\n  return (\r\n    <div className=\"sudoku\">\r\n      <div className=\"sudoku__content\">\r\n        {array}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Sudoku;\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Sudoku from '../sudoku/sudoku';\r\n\r\n\r\n// блок, внутри которого отображаются сгенерированные судоку\r\n// содержимое этого блока выводится на печать\r\nconst Preview = () => {\r\n  const store = useSelector(state => state);\r\n\r\n  return (\r\n    <section className=\"preview-wp\">\r\n\r\n      {store.fluids.map((block, index) => {\r\n        return (\r\n          <div className={`preview preview-${store.params.sudokuCount}`}>\r\n            {store.fluids[index].map((el, i) => {\r\n              return <Sudoku key={i} array={el} />\r\n            })}\r\n          </div>\r\n        )\r\n      })}\r\n\r\n    </section>\r\n  )\r\n};\r\n\r\nexport default Preview;\r\n\r\n","import React, { useState } from 'react';\r\n\r\n// область с анимационными блоками (анимационный фон)\r\nconst Area = () => {\r\n  return (\r\n    <div class=\"area\" >\r\n      <ul class=\"circles\">\r\n\r\n        {[...Array(10)].map((item, i) => (\r\n          <li key={i}>\r\n            {item}\r\n          </li>\r\n        ))}\r\n\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Area;\r\n\r\n","import React from \"react\";\r\n\r\nimport Panel from './components/panel/panel';\r\nimport Preview from './components/preview/preview';\r\nimport Area from './components/area/area';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <>\r\n      <Panel />\r\n      <Preview />\r\n      <Area />\r\n\r\n      <footer class=\"no-print hide\">\r\n        <p>\r\n          Icons made by\r\n          <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\"> Freepik </a>\r\n          from\r\n          <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\r\n        </p>\r\n      </footer>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the settings load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web settings is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different settings. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport level from \"./level\";\r\nimport sudokuCount from \"./sudokuCount\";\r\nimport pages from \"./pages\";\r\nimport sudokuCountOptions from \"./sudokuCountOptions\";\r\n\r\nexport default combineReducers({\r\n  level,\r\n  sudokuCount,\r\n  pages,\r\n  sudokuCountOptions\r\n})\r\n","\r\nimport { LEVEL } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = 1, action) => {\r\n  if (action.type === LEVEL) {\r\n    return action.value;\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n","\r\nimport { BLOCKS_ON_SHEET } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = 1, action) => {\r\n  if (action.type === BLOCKS_ON_SHEET) {\r\n    return action.value;\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n","\r\nimport { NUMBER_OF_SHEET } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = 1, action) => {\r\n  if (action.type === NUMBER_OF_SHEET) {\r\n    return action.value;\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n","\r\nimport { COUNT_BLOCKS_ON_SHEET } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = 1, action) => {\r\n  if (action.type === COUNT_BLOCKS_ON_SHEET) {\r\n    return action.value;\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport fluids from \"./fluids/index\";\r\nimport params from \"./params/index\";\r\n\r\nexport default combineReducers({\r\n    fluids,\r\n    params\r\n})\r\n","\r\nimport { FLUIDS } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = [], action) => {\r\n    if (action.type === FLUIDS) {\r\n        return action.array;\r\n    } else {\r\n        return state\r\n    }\r\n}\r\n","\r\nimport { createStore } from 'redux';\r\n\r\nimport reducer from '../store/reducers';\r\nimport startingValue from './startingValue';\r\n\r\nconst store = createStore(reducer, startingValue);\r\n\r\nexport default store;\r\n","\r\n// стартовые значения для store\r\n\r\nexport default {\r\n  fluids: [],\r\n  \r\n  params: {\r\n    level: 1,\r\n    sudokuCount: 6,\r\n    pages: 1,\r\n    sudokuCountOptions: [1, 2, 4, 6, 9],\r\n  }\r\n};\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport mainStore from './store/mainStore';\r\nimport { Provider } from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={mainStore}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n\r\n  \r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}