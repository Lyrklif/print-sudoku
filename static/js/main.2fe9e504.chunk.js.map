{"version":3,"sources":["constants/levels.js","components/select-level/select-level.js","store/actions/params/level.js","constants/actionTypes.js","constants/sudokuCountOptions.js","components/sudoku-count/sudoku-count.js","store/actions/params/sudokuCount.js","components/sheet-count/sheet-count.js","store/actions/params/pages.js","functions/getSudokuArray.js","functions/getRandomNumber.js","functions/getUniqueNumbersArray.js","functions/getClearedArrayByIndexes.js","components/loader/loader.js","components/create-print-button/create-print-button.js","store/actions/fluids/fluids.js","components/panel/panel.js","components/sudoku/sudoku.js","components/preview/preview.js","components/area/area.js","components/header/header.js","components/footer/footer.js","App.js","serviceWorker.js","store/reducers/params/index.js","store/reducers/params/level.js","store/reducers/params/sudokuCount.js","store/reducers/params/pages.js","store/reducers/index.js","store/reducers/fluids/index.js","store/mainStore.js","store/startingValue.js","index.js"],"names":["name","title","hiddenNumbers","SelectLevel","store","useSelector","state","dispatch","useDispatch","className","for","id","value","params","level","onChange","e","type","target","levels","map","elem","i","key","SudokuCount","sudokuCountOptions","sudokuCount","onClick","SheetCount","handleChange","pages","min","max","onInput","getSudokuArray","puzzle","makepuzzle","solution","solvepuzzle","fixedPuzzle","forEach","number","getRandomNumber","Math","floor","random","getUniqueNumbersArray","length","array","randomNumber","indexOf","push","getClearedArrayByIndexes","baseArray","indexes","clearedArray","Loader","class","CreatePrintButton","useState","progress","changeProgress","createSudokuArray","blocks","sheet","z","completeArray","getEmptyArray","getArray","Array","disabled","setTimeout","Panel","Sudoku","props","index","Preview","useEffect","fluids","console","log","window","print","block","el","Area","item","Header","Footer","href","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","combineReducers","action","createStore","reducer","ReactDOM","render","mainStore","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2fe9e504.chunk.js","sourcesContent":["\r\n// уровни сложности судоку\r\n\r\nexport default [\r\n  {\r\n    name: 'empty',\r\n    title: 'Пустые (шаблоны)',\r\n    hiddenNumbers: 81,\r\n  },\r\n  {\r\n    name: 'easy',\r\n    title: 'Легко',\r\n    hiddenNumbers: 40,\r\n  },\r\n  {\r\n    name: 'normally',\r\n    title: 'Нормально',\r\n    hiddenNumbers: 48,\r\n  },\r\n  {\r\n    name: 'difficult',\r\n    title: 'Сложно',\r\n    hiddenNumbers: 53,\r\n  },\r\n  {\r\n    name: 'veryDifficult',\r\n    title: 'Очень сложно',\r\n    hiddenNumbers: 58,\r\n  },\r\n  {\r\n    name: 'hardcore',\r\n    title: 'Хардкор',\r\n    hiddenNumbers: 65,\r\n  },\r\n];","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport level from '../../store/actions/params/level';\r\nimport levels from '../../constants/levels';\r\n\r\n\r\n// задать уровень сложности судоку\r\nconst SelectLevel = () => {\r\n  const store = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // при изменении select option (уровни сложности)\r\n  const handleChange = (e) => {\r\n    dispatch(level(+e.target.value))\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <label className=\"fluid-name\" for=\"select-level\">Уровень сложности</label>\r\n\r\n      <div className=\"select\">\r\n        <select className=\"select__content\" id=\"select-level\" value={store.params.level} onChange={handleChange}>\r\n\r\n          {levels.map((elem, i) => {\r\n            return (\r\n              <option key={i} value={i}>{elem.title}</option>\r\n            );\r\n          })}\r\n\r\n        </select>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default SelectLevel;\r\n\r\n","import { LEVEL } from \"../../../constants/actionTypes\";\r\n\r\nexport default (value) => {\r\n  return {\r\n    type: LEVEL,\r\n    value\r\n  };\r\n}\r\n\r\n","\r\n// типы, используемые при записи в store\r\n\r\nexport const FLUIDS = 'FLUIDS';\r\n\r\n\r\nexport const LEVEL = 'LEVEL';\r\nexport const PAGES = 'PAGES';\r\nexport const SUDOKU_COUNT = 'SUDOKU_COUNT';\r\n\r\n\r\n","\r\n\r\n// sudokuCountOptions\r\n// варианты к-ва судоку на странице\r\n\r\nexport default [1, 2, 4, 6, 9];","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport sudokuCount from '../../store/actions/params/sudokuCount';\r\nimport sudokuCountOptions from '../../constants/sudokuCountOptions';\r\n\r\n\r\n// задать к-во судоку на странице\r\nconst SudokuCount = () => {\r\n  const store = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // при нажатии на кнопки с цифрами -> к-во судоку на странице\r\n  const handleClick = (value) => {\r\n    dispatch(sudokuCount(value))\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <p className=\"fluid-name\">Количество судоку на&nbsp;странице</p>\r\n      <ul className=\"sudoku-count__list\">\r\n\r\n        {sudokuCountOptions.map((elem, i) => {\r\n          return (\r\n            <li className=\"sudoku-count__item\" key={i}>\r\n              <button\r\n                className={\"sudoku-count__btn btn-secondary \" + (elem === store.params.sudokuCount ? 'active' : '')}\r\n                onClick={() => handleClick(elem)}\r\n              >{elem}</button>\r\n            </li>\r\n          );\r\n        })}\r\n\r\n      </ul>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default SudokuCount;\r\n\r\n","import { SUDOKU_COUNT } from \"../../../constants/actionTypes\";\r\n\r\nexport default (value) => {\r\n  return {\r\n    type: SUDOKU_COUNT,\r\n    value\r\n  };\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport pages from '../../store/actions/params/pages';\r\n\r\n\r\n// задать к-во страниц\r\nconst SheetCount = () => {\r\n  const store = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // обработчик изменения input value (к-во стр.)\r\n  const handleChange = (value) => {\r\n    dispatch(pages(value))\r\n  };\r\n\r\n\r\n  // уменьшить значение на 1\r\n  const minus = () => {\r\n    let value = store.params.pages - 1;\r\n    value = value >= 1 ? value : 1;\r\n\r\n    handleChange(value);\r\n  };\r\n\r\n\r\n  // увеличить значение на 1\r\n  const plus = () => {\r\n    let value = store.params.pages + 1;\r\n    value = value <= 100 ? value : 100;\r\n\r\n    handleChange(value);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <label className=\"fluid-name\" for=\"sheet\">Количество страниц</label>\r\n\r\n      <div className=\"sheet-count__controls-group\">\r\n\r\n        <button\r\n          onClick={minus}\r\n          className=\"btn-secondary sheet-count__btn sheet-count__btn_minus\">-</button>\r\n\r\n        <input\r\n          className=\"sheet-count__input\"\r\n          id=\"sheet\"\r\n          value={store.params.pages}\r\n          type=\"number\"\r\n          min=\"1\"\r\n          max=\"100\"\r\n          onInput={(e) => handleChange(e.target.value)}\r\n        />\r\n\r\n        <button\r\n          onClick={plus}\r\n          className=\"btn-secondary sheet-count__btn sheet-count__btn_plus\">+</button>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default SheetCount;\r\n\r\n","import { PAGES } from \"../../../constants/actionTypes\";\r\n\r\nexport default (value) => {\r\n  return {\r\n    type: PAGES,\r\n    value\r\n  };\r\n}\r\n\r\n","import { makepuzzle, solvepuzzle } from \"sudoku\";\r\n\r\n\r\n/**\r\n * возвращает сгенерированный массив чисел для судоку\r\n * \r\n * @returns {object []}\r\n */\r\nconst getSudokuArray = () => {\r\n  let puzzle = makepuzzle(); // судоку с отсутствием части цифр\r\n  let solution = solvepuzzle(puzzle); // решение\r\n\r\n  // исправленный массив. все числа увеличены на 1, \r\n  // т.к. в оригинальном массиве идут числа от 0 до 8\r\n  let fixedPuzzle = []; \r\n\r\n  // увеличить все числа на 1\r\n  solution.forEach((number, i) => {\r\n    fixedPuzzle[i] = ++number;\r\n  });\r\n\r\n  return fixedPuzzle;\r\n};\r\n\r\nexport default getSudokuArray;\r\n","\r\n\r\n/**\r\n * возвращает рандомное число в заданном промежутке\r\n *\r\n * @param {number} min [минимальное число]\r\n * @param {number} max [максимальное число]\r\n * @returns {number}\r\n */\r\nconst getRandomNumber = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\nexport default getRandomNumber;","\r\nimport getRandomNumber from './getRandomNumber';\r\n\r\n\r\n/**\r\n * возвращает сгенерированный массив из уникальных чисел (т.е. числа в нём не повторяются)\r\n *\r\n * @param {number} [length=0] [длина массива]\r\n * @param {number} [min=0] [минимальное значение числа]\r\n * @param {number} [max=100] [максимальное значение числа]\r\n * @returns {object []}\r\n */\r\nconst getUniqueNumbersArray = (length = 0, min = 0, max = 100) => {\r\n  // array = Array.from({length: count}, () => Math.floor(Math.random() * count));\r\n  let array = [];\r\n\r\n  while (array.length < length - 1) {\r\n    let randomNumber = getRandomNumber(min, max);\r\n\r\n    if (!array.indexOf(randomNumber) > -1) {\r\n      array.push(randomNumber);\r\n    }\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nexport default getUniqueNumbersArray;","\r\n/**\r\n * возвращает массив, в котором элементы по заданным индексам заменены на пустую строку\r\n *\r\n * @param {object []} baseArray [изначальный массив]\r\n * @param {object []} indexes [массив индексов]\r\n * @returns {object []}\r\n */\r\nconst getClearedArrayByIndexes = (baseArray, indexes) => {\r\n  let clearedArray = baseArray;\r\n\r\n  indexes.forEach(i => {\r\n    clearedArray[i] = '';\r\n  });\r\n\r\n  return clearedArray;\r\n}\r\n\r\nexport default getClearedArrayByIndexes;","\r\nimport React from 'react';\r\n\r\n\r\n// кнопки\r\nconst Loader = () => {\r\n  return (\r\n    <>\r\n      <span class=\"loader\"></span>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Loader;\r\n\r\n","\r\nimport React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport levels from '../../constants/levels';\r\n\r\nimport fluids from '../../store/actions/fluids/fluids';\r\n\r\nimport getSudokuArray from '../../functions/getSudokuArray';\r\nimport getUniqueNumbersArray from '../../functions/getUniqueNumbersArray';\r\nimport getClearedArrayByIndexes from '../../functions/getClearedArrayByIndexes';\r\n\r\nimport Loader from '../loader/loader';\r\n\r\n\r\n\r\n// кнопки\r\nconst CreatePrintButton = () => {\r\n  const store = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  const length = levels[store.params.level].hiddenNumbers;\r\n  const [progress, changeProgress] = useState(false); // прогресс создания судоку\r\n\r\n\r\n  // записать массив судоку в store\r\n  const setSudokuArray = () => {\r\n    changeProgress(true);\r\n\r\n    setTimeout(() => {\r\n      dispatch(fluids(createSudokuArray())); // записать новый массив судоку в store\r\n      changeProgress(false);\r\n    }, 500);\r\n  };\r\n\r\n\r\n  // создать массив судоку\r\n  const createSudokuArray = () => {\r\n    let array = [];\r\n    let blocks = store.params.sudokuCount;\r\n    let sheet = store.params.pages;\r\n\r\n    for (let i = 0; i < sheet; ++i) {\r\n      array[i] = [];\r\n      for (let z = 0; z < blocks; ++z) {\r\n\r\n        // удалить из массива судоку несколько чисел, к-во зависит от уровня сложности \r\n        let completeArray = length === 81 ? getEmptyArray() : getArray();\r\n        array[i][z] = completeArray;\r\n      }\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  // вернуть массив судоку\r\n  const getArray = () => {\r\n    return getClearedArrayByIndexes(getSudokuArray(), getUniqueNumbersArray(length, 0, 80));\r\n  };\r\n\r\n  // вернуть пустой массив\r\n  const getEmptyArray = () => {\r\n    return [...Array(length)]; // указано к-во пустых ячеек\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        disabled={progress}\r\n        title={progress ? 'Судоку создаётся' : 'Создать судоку'}\r\n        className={\"create-print-btn \" + (progress ? 'loading btn-secondary' : 'btn-primary')}\r\n        onClick={setSudokuArray}\r\n      >\r\n        {progress ?\r\n          <Loader />\r\n          :\r\n          <span>Создать и&nbsp;распечатать</span>\r\n        }\r\n      </button>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default CreatePrintButton;\r\n\r\n","\r\nimport { FLUIDS } from \"../../../constants/actionTypes\";\r\n\r\nexport default (array) => {\r\n  return {\r\n    type: FLUIDS,\r\n    array\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nimport SelectLevel from '../select-level/select-level';\r\nimport SudokuCount from '../sudoku-count/sudoku-count';\r\nimport SheetCount from '../sheet-count/sheet-count';\r\n\r\nimport CreatePrintButton from '../create-print-button/create-print-button';\r\n\r\n\r\n// панель настроек параметров судоку\r\nconst Panel = () => {\r\n\r\n  return (\r\n    <section className=\"panel no-print\">\r\n      <header className=\"hide\">\r\n        <h2>Панель параметров</h2>\r\n      </header>\r\n\r\n      <SelectLevel />\r\n      <SudokuCount />\r\n      <SheetCount />\r\n\r\n      <CreatePrintButton />\r\n\r\n    </section>\r\n  )\r\n};\r\n\r\nexport default Panel;\r\n\r\n","import React from 'react';\r\n\r\n\r\n// судоку (отображение массива в виде квадрата 9х9) \r\nconst Sudoku = (props) => {\r\n\r\n  // массив чисел, записанных в <div>\r\n  const array = props.array.map((number, index) => {\r\n    return (\r\n      <div key={index} className=\"sudoku__col\">\r\n        <span className=\"sudoku__number\">{number}</span>\r\n      </div>\r\n    )\r\n  });\r\n\r\n\r\n  return (\r\n    <div className=\"sudoku\">\r\n      <div className=\"sudoku__content\">\r\n        {array}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Sudoku;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Sudoku from '../sudoku/sudoku';\r\n\r\n\r\n// блок, внутри которого отображаются сгенерированные судоку\r\n// содержимое этого блока выводится на печать\r\nconst Preview = () => {\r\n  const store = useSelector(state => state);\r\n\r\n\r\n  // вызывается при обновлении store.fluids\r\n  useEffect(() => {\r\n\r\n    // если есть созданные судоку\r\n    if (store.fluids.length) {\r\n      console.log(`Было создано ${store.params.pages * store.params.sudokuCount} судоку`);\r\n\r\n      window.print(); // вызвать диалоговое окно для печати\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [store.fluids]);\r\n\r\n\r\n  return (\r\n    <section className=\"preview-wp\">\r\n      <header className=\"hide no-print\">\r\n        <h2>Превью созданных судоку</h2>\r\n      </header>\r\n\r\n      {store.fluids.map((block, index) => {\r\n        return (\r\n          <div className={`preview preview-${store.params.sudokuCount}`}>\r\n            {store.fluids[index].map((el, i) => {\r\n              return <Sudoku key={i} array={el} />\r\n            })}\r\n          </div>\r\n        )\r\n      })}\r\n\r\n    </section>\r\n  )\r\n};\r\n\r\nexport default Preview;\r\n\r\n","import React from 'react';\r\n\r\n// область с анимационными блоками (анимационный фон)\r\nconst Area = () => {\r\n  return (\r\n    <div class=\"area\" >\r\n      <ul class=\"circles\">\r\n\r\n        {[...Array(10)].map((item, i) => (\r\n          <li key={i}>\r\n            {item}\r\n          </li>\r\n        ))}\r\n\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Area;\r\n\r\n","\r\n\r\nimport React from 'react';\r\n\r\n\r\n\r\n// шапка\r\nconst Header = () => {\r\n\r\n  return (\r\n    <header className=\"header no-print\">\r\n      <h1>Судоку для печати</h1>\r\n    </header>\r\n  )\r\n};\r\n\r\nexport default Header;\r\n\r\n","\r\nimport React from \"react\";\r\n\r\n\r\n// подвал\r\nconst Footer = () => {\r\n\r\n  return (\r\n    <footer class=\"no-print hide\">\r\n      <p>\r\n        Icons made by\r\n          <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\"> Freepik </a>\r\n          from\r\n          <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\r\n      </p>\r\n    </footer>\r\n  )\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nimport Panel from './components/panel/panel';\r\nimport Preview from './components/preview/preview';\r\nimport Area from './components/area/area';\r\nimport Header from './components/header/header';\r\nimport Footer from './components/footer/footer';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <>\r\n    <Header />\r\n\r\n      <Panel />\r\n      <Preview />\r\n      <Area />\r\n\r\n      <Footer />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the settings load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web settings is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different settings. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport level from \"./level\";\r\nimport sudokuCount from \"./sudokuCount\";\r\nimport pages from \"./pages\";\r\n\r\nexport default combineReducers({\r\n  level,\r\n  sudokuCount,\r\n  pages,\r\n})\r\n","\r\nimport { LEVEL } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = 1, action) => {\r\n  if (action.type === LEVEL) {\r\n    return action.value;\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n","\r\nimport { SUDOKU_COUNT } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = 1, action) => {\r\n  if (action.type === SUDOKU_COUNT) {\r\n    return action.value;\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n","\r\nimport { PAGES } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = 1, action) => {\r\n  if (action.type === PAGES) {\r\n    return action.value;\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport fluids from \"./fluids/index\";\r\nimport params from \"./params/index\";\r\n\r\nexport default combineReducers({\r\n    fluids,\r\n    params\r\n})\r\n","\r\nimport { FLUIDS } from \"../../../constants/actionTypes\";\r\n\r\nexport default (state = [], action) => {\r\n    if (action.type === FLUIDS) {\r\n        return action.array;\r\n    } else {\r\n        return state\r\n    }\r\n}\r\n","\r\nimport { createStore } from 'redux';\r\n\r\nimport reducer from '../store/reducers';\r\nimport startingValue from './startingValue';\r\n\r\nconst store = createStore(reducer, startingValue);\r\n\r\nexport default store;\r\n","\r\n// стартовые значения для store\r\n\r\nexport default {\r\n  fluids: [],\r\n  \r\n  params: {\r\n    level: 2, // уровень сложности\r\n    sudokuCount: 6, // к-во судоку на странице\r\n    pages: 1, // к-во страниц\r\n  }\r\n};\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport mainStore from './store/mainStore';\r\nimport { Provider } from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={mainStore}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n\r\n  \r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}